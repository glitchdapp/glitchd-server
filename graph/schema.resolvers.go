package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"

	"github.com/glitchd/glitchd-server/database"
	"github.com/glitchd/glitchd-server/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input *model.UpdateUser) (bool, error) {
	return database.DB.UpdateUser(id, input)
}

// UpdateUserPhoto is the resolver for the updateUserPhoto field.
func (r *mutationResolver) UpdateUserPhoto(ctx context.Context, id string, photo string) (bool, error) {
	return database.DB.UpdateUserPhoto(id, photo)
}

// UpdateUserCoverPhoto is the resolver for the updateUserCoverPhoto field.
func (r *mutationResolver) UpdateUserCoverPhoto(ctx context.Context, id string, photo string) (bool, error) {
	return database.DB.UpdateUserCoverPhoto(id, photo)
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*model.User, error) {
	return database.DB.DeleteUser(id)
}

// LikePost is the resolver for the likePost field.
func (r *mutationResolver) LikePost(ctx context.Context, userID string, postID string) (bool, error) {
	panic(fmt.Errorf("not implemented: LikePost - likePost"))
}

// UnlikePost is the resolver for the unlikePost field.
func (r *mutationResolver) UnlikePost(ctx context.Context, userID string, postID string) (bool, error) {
	panic(fmt.Errorf("not implemented: UnlikePost - unlikePost"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string) (string, error) {
	return database.DB.LoginAccount(email)
}

// VerifyToken is the resolver for the verifyToken field.
func (r *mutationResolver) VerifyToken(ctx context.Context, id string, token string) (string, error) {
	return database.DB.VerifyToken(id, token)
}

// VerifyEmail is the resolver for the verifyEmail field.
func (r *mutationResolver) VerifyEmail(ctx context.Context, id string, email string) (bool, error) {
	return database.DB.VerifyEmail(id, email)
}

// PostMessage is the resolver for the postMessage field.
func (r *mutationResolver) PostMessage(ctx context.Context, input *model.NewMessage) (*model.Message, error) {
	room := r.getRoom(input.ChannelID)

	msg, err := database.DB.CreateMessage(input)

	// append only the latest message if the channel id matches.
	room.Message = msg

	// Notify all active subscriptions that a new message has been posted by posted. In this case we push the now
	// updated ChatMessages to all clients that care about it.
	room.Observers.Range(func(_, v any) bool {
		observer := v.(*Observer)

		if observer.ChannelID == msg.ChannelID {
			observer.Message <- msg
		}
		return true
	})
	return msg, err
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: CreatePost - createPost"))
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, id string, input model.UpdatePost) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: UpdatePost - updatePost"))
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: DeletePost - deletePost"))
}

// AddToWaitlist is the resolver for the addToWaitlist field.
func (r *mutationResolver) AddToWaitlist(ctx context.Context, input model.NewWaitlist) (*model.Waitlist, error) {
	panic(fmt.Errorf("not implemented: AddToWaitlist - addToWaitlist"))
}

// UpdateWaitlistEntry is the resolver for the updateWaitlistEntry field.
func (r *mutationResolver) UpdateWaitlistEntry(ctx context.Context, email string, canEnter bool) (*model.Waitlist, error) {
	panic(fmt.Errorf("not implemented: UpdateWaitlistEntry - updateWaitlistEntry"))
}

// FollowUser is the resolver for the followUser field.
func (r *mutationResolver) FollowUser(ctx context.Context, input model.FollowInput) (*model.Follower, error) {
	return database.DB.AddFollower(input)
}

// RemoveFollower is the resolver for the removeFollower field.
func (r *mutationResolver) RemoveFollower(ctx context.Context, userID string, followerID string) (bool, error) {
	return database.DB.RemoveFollower(userID, followerID)
}

// UpdateChatIdentity is the resolver for the updateChatIdentity field.
func (r *mutationResolver) UpdateChatIdentity(ctx context.Context, userID string, input model.ChatIdentityInput) (bool, error) {
	return database.DB.UpdateChatIdentity(userID, input)
}

// AddUserInChat is the resolver for the addUserInChat field.
func (r *mutationResolver) AddUserInChat(ctx context.Context, channelID string, userID string) (bool, error) {
	return database.DB.AddUserInChat(channelID, userID)
}

// RemoveUserInChat is the resolver for the removeUserInChat field.
func (r *mutationResolver) RemoveUserInChat(ctx context.Context, channelID string, userID string) (bool, error) {
	return database.DB.DeleteUserInChat(channelID, userID)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// GetUserByUsername is the resolver for the getUserByUsername field.
func (r *queryResolver) GetUserByUsername(ctx context.Context, username string) (*model.User, error) {
	return database.DB.GetUserByUsername(username)
}

// GetUserByEmail is the resolver for the getUserByEmail field.
func (r *queryResolver) GetUserByEmail(ctx context.Context, email string) (*model.User, error) {
	return database.DB.GetAccountByEmail(email)
}

// GetUserByID is the resolver for the getUserById field.
func (r *queryResolver) GetUserByID(ctx context.Context, id string) (*model.User, error) {
	return database.DB.GetUser(id)
}

// SearchUsers is the resolver for the searchUsers field.
func (r *queryResolver) SearchUsers(ctx context.Context, query string) ([]*model.User, error) {
	return database.DB.SearchUsers(query)
}

// GetPostByUserPaginated is the resolver for the getPostByUserPaginated field.
func (r *queryResolver) GetPostByUserPaginated(ctx context.Context, userID string, page int, limit int) ([]*model.Post, error) {
	panic(fmt.Errorf("not implemented: GetPostByUserPaginated - getPostByUserPaginated"))
}

// GetPostByID is the resolver for the getPostById field.
func (r *queryResolver) GetPostByID(ctx context.Context, id string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: GetPostByID - getPostById"))
}

// GetLikes is the resolver for the getLikes field.
func (r *queryResolver) GetLikes(ctx context.Context, postID string) ([]*model.Like, error) {
	panic(fmt.Errorf("not implemented: GetLikes - getLikes"))
}

// IsLiked is the resolver for the isLiked field.
func (r *queryResolver) IsLiked(ctx context.Context, postID string, userID string) (bool, error) {
	panic(fmt.Errorf("not implemented: IsLiked - isLiked"))
}

// GetWaitlist is the resolver for the getWaitlist field.
func (r *queryResolver) GetWaitlist(ctx context.Context, email string) (bool, error) {
	panic(fmt.Errorf("not implemented: GetWaitlist - getWaitlist"))
}

// GetFollowers is the resolver for the getFollowers field.
func (r *queryResolver) GetFollowers(ctx context.Context, userID string) ([]*model.User, error) {
	return database.DB.GetFollowers(userID)
}

// GetFollowing is the resolver for the getFollowing field.
func (r *queryResolver) GetFollowing(ctx context.Context, followerID string) ([]*model.User, error) {
	return database.DB.GetFollowing(followerID)
}

// CountFollowers is the resolver for the countFollowers field.
func (r *queryResolver) CountFollowers(ctx context.Context, userID string) (int, error) {
	return database.DB.CountFollowers(userID)
}

// CountFollowing is the resolver for the countFollowing field.
func (r *queryResolver) CountFollowing(ctx context.Context, followerID string) (int, error) {
	return database.DB.CountFollowing(followerID)
}

// IsFollowing is the resolver for the isFollowing field.
func (r *queryResolver) IsFollowing(ctx context.Context, userID string) (bool, error) {
	return database.DB.IsFollowing(userID)
}

// GetRecentMessages is the resolver for the getRecentMessages field.
func (r *queryResolver) GetRecentMessages(ctx context.Context, channelID string) ([]*model.Message, error) {
	return database.DB.GetRecentMessages(channelID)
}

// GetChatIdentity is the resolver for the getChatIdentity field.
func (r *queryResolver) GetChatIdentity(ctx context.Context, userID string) (*model.ChatIdentity, error) {
	return database.DB.GetChatIdentity(userID)
}

// GetUsersInChat is the resolver for the getUsersInChat field.
func (r *queryResolver) GetUsersInChat(ctx context.Context, channelID string) ([]*model.User, error) {
	return database.DB.GetUsersInChat(channelID)
}

// GetMessages is the resolver for the getMessages field.
func (r *subscriptionResolver) GetMessages(ctx context.Context, channelID string) (<-chan *model.Message, error) {
	room := r.getRoom(channelID)

	id := randString(8)
	events := make(chan *model.Message, 1)

	go func() {
		<-ctx.Done()
		room.Observers.Delete(id)
	}()

	room.Observers.Store(id, &Observer{
		ChannelID: channelID,
		Message:   events,
	})

	return events, nil
}

// GetSubs is the resolver for the getSubs field.
func (r *subscriptionResolver) GetSubs(ctx context.Context, userID string) (<-chan *model.User, error) {
	panic(fmt.Errorf("not implemented: GetSubs - getSubs"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
