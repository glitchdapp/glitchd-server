package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"
	"strconv"

	"github.com/glitchd/glitchd-server/database"
	"github.com/glitchd/glitchd-server/graph/model"
)

// CreateLog is the resolver for the createLog field.
func (r *mutationResolver) CreateLog(ctx context.Context, data string) (bool, error) {
	return database.DB.CreateLog(data)
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input *model.NewUser) (string, error) {
	return database.DB.CreateUser(input)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input *model.UpdateUser) (bool, error) {
	return database.DB.UpdateUser(id, input)
}

// UpdateUserPhoto is the resolver for the updateUserPhoto field.
func (r *mutationResolver) UpdateUserPhoto(ctx context.Context, id string, photo string) (bool, error) {
	return database.DB.UpdateUserPhoto(id, photo)
}

// UpdateUserCoverPhoto is the resolver for the updateUserCoverPhoto field.
func (r *mutationResolver) UpdateUserCoverPhoto(ctx context.Context, id string, photo string) (bool, error) {
	return database.DB.UpdateUserCoverPhoto(id, photo)
}

// UpdateUserStripe is the resolver for the updateUserStripe field.
func (r *mutationResolver) UpdateUserStripe(ctx context.Context, id string, input *model.UserStripeInput) (bool, error) {
	return database.DB.UpdateUserStripe(id, input)
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	return database.DB.DeleteUser(id)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string) (string, error) {
	return database.DB.LoginAccount(email)
}

// VerifyToken is the resolver for the verifyToken field.
func (r *mutationResolver) VerifyToken(ctx context.Context, id string, token string) (string, error) {
	return database.DB.VerifyToken(id, token)
}

// VerifyEmail is the resolver for the verifyEmail field.
func (r *mutationResolver) VerifyEmail(ctx context.Context, id string, email string) (bool, error) {
	return database.DB.VerifyEmail(id, email)
}

// CreateChannel is the resolver for the createChannel field.
func (r *mutationResolver) CreateChannel(ctx context.Context, userID string, input model.ChannelInput) (bool, error) {
	return database.DB.CreateChannel(userID, input)
}

// CreateChannelViewer is the resolver for the createChannelViewer field.
func (r *mutationResolver) CreateChannelViewer(ctx context.Context, channelID string, userID string) (int, error) {
	viewer := r.getChannelViewers(channelID)

	viewer.Count = viewer.Count + 1

	res, err := database.DB.CreateChannelViewer(channelID, userID)

	// Notify all active subscriptions that a new message has been posted by posted. In this case we push the now
	// updated ChatMessages to all clients that care about it.
	viewer.Observers.Range(func(_, v any) bool {
		observer := v.(*ChannelObserver)

		if observer.ChannelID == channelID {
			observer.Count <- 1
		}
		return true
	})
	return res, err
}

// UpdateStreamKey is the resolver for the updateStreamKey field.
func (r *mutationResolver) UpdateStreamKey(ctx context.Context, userID string, streamkey string, playbackID string) (bool, error) {
	return database.DB.UpdateStreamkey(userID, streamkey, playbackID)
}

// PostMessage is the resolver for the postMessage field.
func (r *mutationResolver) PostMessage(ctx context.Context, input *model.NewMessage) (*model.Message, error) {
	activity := r.getChannelActivity(input.ChannelID)
	room := r.getRoom(input.ChannelID)

	msg, err := database.DB.CreateMessage(input)

	if input.MessageType == "flakes" {
		isSent, err := database.DB.SendFlakes(input.ChannelID, input.SenderID, input.Amount)

		if err != nil {
			return nil, err
		}

		if !isSent {
			return nil, nil
		}

		if isSent {
			amount := strconv.Itoa(input.Amount)

			act, _ := database.DB.CreateActivity(input.SenderID, input.ChannelID, "flakes", "Sent you "+amount+" Flakes")

			sender, _ := database.DB.GetUser(act.SenderID)
			target, _ := database.DB.GetUser(act.TargetID)

			act.Sender = sender
			act.Target = target

			// Notify all active subscriptions that a new message has been posted by posted. In this case we push the now
			// updated ChatMessages to all clients that care about it.
			activity.Observers.Range(func(_, v any) bool {
				observer := v.(*ActivityObserver)

				if observer.ChannelID == activity.ChannelID {
					observer.Activity <- act
				}
				return true
			})

		}
	}

	// append only the latest message if the channel id matches.
	room.Message = msg

	// Notify all active subscriptions that a new message has been posted by posted. In this case we push the now
	// updated ChatMessages to all clients that care about it.
	room.Observers.Range(func(_, v any) bool {
		observer := v.(*Observer)

		if observer.ChannelID == msg.ChannelID {
			observer.Message <- msg
		}
		return true
	})
	return msg, err
}

// CreateVideo is the resolver for the createVideo field.
func (r *mutationResolver) CreateVideo(ctx context.Context, input model.NewVideo) (string, error) {
	return database.DB.CreateVideo(input)
}

// CreateVideoView is the resolver for the createVideoView field.
func (r *mutationResolver) CreateVideoView(ctx context.Context, input model.NewVideoView) (int, error) {
	viewer := r.getVideoViewers(input.VideoID)

	viewer.Count = viewer.Count + 1

	res, err := database.DB.CreateVideoView(input)

	// Notify all active subscriptions that a new message has been posted by posted. In this case we push the now
	// updated ChatMessages to all clients that care about it.
	viewer.Observers.Range(func(_, v any) bool {
		observer := v.(*VideoObserver)

		if observer.VideoID == input.VideoID {
			observer.Count <- 1
		}
		return true
	})
	return res, err
}

// UpdateVideo is the resolver for the updateVideo field.
func (r *mutationResolver) UpdateVideo(ctx context.Context, id string, input model.UpdateVideo) (bool, error) {
	return database.DB.UpdateVideo(id, input)
}

// DeleteVideo is the resolver for the deleteVideo field.
func (r *mutationResolver) DeleteVideo(ctx context.Context, id string) (bool, error) {
	return database.DB.DeleteVideo(id)
}

// UpdateVideoJob is the resolver for the updateVideoJob field.
func (r *mutationResolver) UpdateVideoJob(ctx context.Context, jobID string, status string) (string, error) {
	jobs := r.getJobStatus(jobID)
	stats, err := database.DB.CreateVideoJob(jobID, status)

	jobs.Observers.Range(func(_, v any) bool {
		observer := v.(*JobObserver)

		if observer.JobID == jobs.JobID {
			observer.Status <- stats
		}
		return true
	})

	return stats, err
}

// FollowUser is the resolver for the followUser field.
func (r *mutationResolver) FollowUser(ctx context.Context, input model.FollowInput) (*model.Follower, error) {
	activity := r.getChannelActivity(input.UserID)

	res, err := database.DB.AddFollower(input)

	act, _ := database.DB.CreateActivity(input.FollowerID, input.UserID, "follow", "Followed you")

	sender, _ := database.DB.GetUser(act.SenderID)
	target, _ := database.DB.GetUser(act.TargetID)

	act.Sender = sender
	act.Target = target

	// Notify all active subscriptions that a new message has been posted by posted. In this case we push the now
	// updated ChatMessages to all clients that care about it.
	activity.Observers.Range(func(_, v any) bool {
		observer := v.(*ActivityObserver)

		if observer.ChannelID == activity.ChannelID {
			observer.Activity <- act
		}
		return true
	})

	return res, err
}

// RemoveFollower is the resolver for the removeFollower field.
func (r *mutationResolver) RemoveFollower(ctx context.Context, userID string, followerID string) (bool, error) {
	return database.DB.RemoveFollower(userID, followerID)
}

// UpdateChatIdentity is the resolver for the updateChatIdentity field.
func (r *mutationResolver) UpdateChatIdentity(ctx context.Context, userID string, input model.ChatIdentityInput) (bool, error) {
	return database.DB.UpdateChatIdentity(userID, input)
}

// AddUserInChat is the resolver for the addUserInChat field.
func (r *mutationResolver) AddUserInChat(ctx context.Context, channelID string, userID string) (bool, error) {
	return database.DB.AddUserInChat(channelID, userID)
}

// RemoveUserInChat is the resolver for the removeUserInChat field.
func (r *mutationResolver) RemoveUserInChat(ctx context.Context, channelID string, userID string) (bool, error) {
	return database.DB.DeleteUserInChat(channelID, userID)
}

// CreatePayment is the resolver for the createPayment field.
func (r *mutationResolver) CreatePayment(ctx context.Context, input model.PaymentInput) (bool, error) {
	return database.DB.CreatePayment(input)
}

// UpdatePayment is the resolver for the updatePayment field.
func (r *mutationResolver) UpdatePayment(ctx context.Context, input model.PaymentInput) (bool, error) {
	return database.DB.UpdatePayment(input)
}

// CreateMembershipDetails is the resolver for the createMembershipDetails field.
func (r *mutationResolver) CreateMembershipDetails(ctx context.Context, input model.MembershipDetailsInput) (bool, error) {
	return database.DB.CreateMembershipDetails(input)
}

// CreateMembership is the resolver for the createMembership field.
func (r *mutationResolver) CreateMembership(ctx context.Context, input model.NewMembership) (*model.Membership, error) {
	activity := r.getChannelActivity(input.ChannelID)

	res, err := database.DB.CreateMembership(input)

	act, _ := database.DB.CreateActivity(input.UserID, input.ChannelID, "subscription", "Subscribed to Tier "+input.Tier)

	sender, _ := database.DB.GetUser(act.SenderID)
	target, _ := database.DB.GetUser(act.TargetID)

	act.Sender = sender
	act.Target = target

	// Notify all active subscriptions that a new message has been posted by posted. In this case we push the now
	// updated ChatMessages to all clients that care about it.
	activity.Observers.Range(func(_, v any) bool {
		observer := v.(*ActivityObserver)

		if observer.ChannelID == activity.ChannelID {
			observer.Activity <- act
		}
		return true
	})

	return res, err
}

// UpdateMembership is the resolver for the updateMembership field.
func (r *mutationResolver) UpdateMembership(ctx context.Context, id string, input model.NewMembership) (bool, error) {
	return database.DB.UpdateMembership(id, input)
}

// UpdateMembershipStatus is the resolver for the updateMembershipStatus field.
func (r *mutationResolver) UpdateMembershipStatus(ctx context.Context, id string, isActive bool) (bool, error) {
	return database.DB.UpdateMembershipStatus(id, isActive)
}

// DeleteMembership is the resolver for the deleteMembership field.
func (r *mutationResolver) DeleteMembership(ctx context.Context, id string) (bool, error) {
	return database.DB.DeleteMembership(id)
}

// AddFlakes is the resolver for the addFlakes field.
func (r *mutationResolver) AddFlakes(ctx context.Context, userID string, amount int) (bool, error) {
	return database.DB.AddFlakes(userID, amount)
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPostInput) (bool, error) {
	return database.DB.CreatePost(input)
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, postID string) (bool, error) {
	return database.DB.DeletePost(postID)
}

// LikePost is the resolver for the likePost field.
func (r *mutationResolver) LikePost(ctx context.Context, postID string, userID string) (bool, error) {
	return database.DB.LikePost(postID, userID)
}

// UnlikePost is the resolver for the unlikePost field.
func (r *mutationResolver) UnlikePost(ctx context.Context, postID string, userID string) (bool, error) {
	return database.DB.UnlikePost(postID, userID)
}

// GetAllUsers is the resolver for the getAllUsers field.
func (r *queryResolver) GetAllUsers(ctx context.Context) ([]*model.User, error) {
	return database.DB.GetUsers()
}

// GetUserByUsername is the resolver for the getUserByUsername field.
func (r *queryResolver) GetUserByUsername(ctx context.Context, username string) (*model.User, error) {
	return database.DB.GetUserByUsername(username)
}

// GetUserByEmail is the resolver for the getUserByEmail field.
func (r *queryResolver) GetUserByEmail(ctx context.Context, email string) (*model.User, error) {
	return database.DB.GetAccountByEmail(email)
}

// GetUserByID is the resolver for the getUserById field.
func (r *queryResolver) GetUserByID(ctx context.Context, id string) (*model.User, error) {
	return database.DB.GetUser(id)
}

// GetRecommendedUsers is the resolver for the getRecommendedUsers field.
func (r *queryResolver) GetRecommendedUsers(ctx context.Context, limit int) ([]*model.User, error) {
	return database.DB.GetAccounts(limit)
}

// SearchUsers is the resolver for the searchUsers field.
func (r *queryResolver) SearchUsers(ctx context.Context, query string) ([]*model.User, error) {
	return database.DB.SearchUsers(query)
}

// GetVideos is the resolver for the getVideos field.
func (r *queryResolver) GetVideos(ctx context.Context, channelID string, first int, after string) (*model.VideosResult, error) {
	return database.DB.GetVideos(channelID, first, after)
}

// GetAllVideos is the resolver for the getAllVideos field.
func (r *queryResolver) GetAllVideos(ctx context.Context, first int, after string) (*model.VideosResult, error) {
	return database.DB.GetAllVideos(first, after)
}

// GetVideosByCategory is the resolver for the getVideosByCategory field.
func (r *queryResolver) GetVideosByCategory(ctx context.Context, category string, first int, after string) (*model.VideosResult, error) {
	return database.DB.GetVideosByCategory(category, first, after)
}

// GetVideoByID is the resolver for the getVideoById field.
func (r *queryResolver) GetVideoByID(ctx context.Context, id string) (*model.Video, error) {
	return database.DB.GetVideoByID(id)
}

// GetVideoViews is the resolver for the getVideoViews field.
func (r *queryResolver) GetVideoViews(ctx context.Context, videoID string) (int, error) {
	return database.DB.GetVideoViews(videoID)
}

// GetChannelViews is the resolver for the getChannelViews field.
func (r *queryResolver) GetChannelViews(ctx context.Context, channelID string) (int, error) {
	return database.DB.GetChannelViews(channelID)
}

// CountChannelVideos is the resolver for the countChannelVideos field.
func (r *queryResolver) CountChannelVideos(ctx context.Context, channelID string) (int, error) {
	return database.DB.CountChannelVideos(channelID)
}

// GetVideoJob is the resolver for the getVideoJob field.
func (r *queryResolver) GetVideoJob(ctx context.Context, jobID string) (string, error) {
	return database.DB.GetVideoJob(jobID)
}

// SearchVideos is the resolver for the searchVideos field.
func (r *queryResolver) SearchVideos(ctx context.Context, query string, first int, after string) (*model.VideosResult, error) {
	return database.DB.SearchVideos(query, first, after)
}

// GetFollowers is the resolver for the getFollowers field.
func (r *queryResolver) GetFollowers(ctx context.Context, userID string, first int, after string) (*model.FollowersResult, error) {
	return database.DB.GetFollowers(userID, first, after)
}

// GetFollowing is the resolver for the getFollowing field.
func (r *queryResolver) GetFollowing(ctx context.Context, followerID string, first int, after string) (*model.FollowersResult, error) {
	return database.DB.GetFollowing(followerID, first, after)
}

// CountFollowers is the resolver for the countFollowers field.
func (r *queryResolver) CountFollowers(ctx context.Context, userID string) (int, error) {
	return database.DB.CountFollowers(userID)
}

// IsFollowing is the resolver for the isFollowing field.
func (r *queryResolver) IsFollowing(ctx context.Context, userID string, followerID string) (bool, error) {
	return database.DB.IsFollowing(userID, followerID)
}

// CountFollowing is the resolver for the countFollowing field.
func (r *queryResolver) CountFollowing(ctx context.Context, followerID string) (int, error) {
	return database.DB.CountFollowing(followerID)
}

// GetRecentMessages is the resolver for the getRecentMessages field.
func (r *queryResolver) GetRecentMessages(ctx context.Context, channelID string) ([]*model.Message, error) {
	return database.DB.GetRecentMessages(channelID)
}

// GetChatIdentity is the resolver for the getChatIdentity field.
func (r *queryResolver) GetChatIdentity(ctx context.Context, userID string) (*model.ChatIdentity, error) {
	return database.DB.GetChatIdentity(userID)
}

// GetUsersInChat is the resolver for the getUsersInChat field.
func (r *queryResolver) GetUsersInChat(ctx context.Context, channelID string) ([]*model.User, error) {
	return database.DB.GetUsersInChat(channelID)
}

// GetRecentActivity is the resolver for the getRecentActivity field.
func (r *queryResolver) GetRecentActivity(ctx context.Context, channelID string) ([]*model.Activity, error) {
	return database.DB.GetRecentActivity(channelID)
}

// GetPaymentBySession is the resolver for the getPaymentBySession field.
func (r *queryResolver) GetPaymentBySession(ctx context.Context, sessionID string) (*model.Payment, error) {
	return database.DB.GetPaymentBySession(sessionID)
}

// GetUserMembership is the resolver for the getUserMembership field.
func (r *queryResolver) GetUserMembership(ctx context.Context, userID string, channelID string) ([]*model.Membership, error) {
	return database.DB.GetUserMembership(userID, channelID)
}

// GetChannelMembershipDetails is the resolver for the getChannelMembershipDetails field.
func (r *queryResolver) GetChannelMembershipDetails(ctx context.Context, channelID string) ([]*model.MembershipDetails, error) {
	return database.DB.GetChannelMembershipDetails(channelID)
}

// GetMembershipByID is the resolver for the getMembershipById field.
func (r *queryResolver) GetMembershipByID(ctx context.Context, id string) (*model.Membership, error) {
	return database.DB.GetMembershipById(id)
}

// GetChannelMemberships is the resolver for the getChannelMemberships field.
func (r *queryResolver) GetChannelMemberships(ctx context.Context, channelID string) ([]*model.Membership, error) {
	return database.DB.GetChannelMemberships(channelID)
}

// GetChannelInfo is the resolver for the getChannelInfo field.
func (r *queryResolver) GetChannelInfo(ctx context.Context, userID string) (*model.Channel, error) {
	return database.DB.GetChannelInfo(userID)
}

// GetFlakes is the resolver for the getFlakes field.
func (r *queryResolver) GetFlakes(ctx context.Context, userID string) (int, error) {
	return database.DB.GetFlakes(userID)
}

// GetChannelFlakes is the resolver for the getChannelFlakes field.
func (r *queryResolver) GetChannelFlakes(ctx context.Context, channelID string) ([]*model.ChannelFlakes, error) {
	return database.DB.GetChannelFlakes(channelID)
}

// GetChannelFlakesLeaders is the resolver for the getChannelFlakesLeaders field.
func (r *queryResolver) GetChannelFlakesLeaders(ctx context.Context, channelID string) ([]*model.ChannelFlakesLeaders, error) {
	return database.DB.GetChannelFlakesLeaders(channelID)
}

// GetUserPosts is the resolver for the getUserPosts field.
func (r *queryResolver) GetUserPosts(ctx context.Context, channelID string, first int, after string) (*model.PostsResult, error) {
	return database.DB.GetUserPosts(channelID, first, after)
}

// GetPostReplies is the resolver for the getPostReplies field.
func (r *queryResolver) GetPostReplies(ctx context.Context, postID string, first int, after string) (*model.PostsResult, error) {
	return database.DB.GetPostReplies(postID, first, after)
}

// CountPostReplies is the resolver for the countPostReplies field.
func (r *queryResolver) CountPostReplies(ctx context.Context, postID string) (int, error) {
	return database.DB.CountPostReplies(postID)
}

// GetAllPosts is the resolver for the getAllPosts field.
func (r *queryResolver) GetAllPosts(ctx context.Context, first int, after string) (*model.PostsResult, error) {
	return database.DB.GetPosts(first, after)
}

// GetPostByID is the resolver for the getPostById field.
func (r *queryResolver) GetPostByID(ctx context.Context, postID string) (*model.Post, error) {
	return database.DB.GetPostByID(postID)
}

// GetPostsByQuery is the resolver for the getPostsByQuery field.
func (r *queryResolver) GetPostsByQuery(ctx context.Context, query string, first int, after string) (*model.PostsResult, error) {
	return database.DB.GetPostsByQuery(query, first, after)
}

// GetFollowingPosts is the resolver for the getFollowingPosts field.
func (r *queryResolver) GetFollowingPosts(ctx context.Context, channelID string, first int, after string) (*model.PostsResult, error) {
	panic(fmt.Errorf("not implemented: GetFollowingPosts - getFollowingPosts"))
}

// GetLikes is the resolver for the getLikes field.
func (r *queryResolver) GetLikes(ctx context.Context, postID string) (int, error) {
	return database.DB.GetLikes(postID)
}

// GetLikedByUser is the resolver for the getLikedByUser field.
func (r *queryResolver) GetLikedByUser(ctx context.Context, postID string, userID string) (bool, error) {
	return database.DB.GetLikedByUser(postID, userID)
}

// GetMessages is the resolver for the getMessages field.
func (r *subscriptionResolver) GetMessages(ctx context.Context, channelID string, userID string) (<-chan *model.Message, error) {
	room := r.getRoom(channelID)

	id := randString(8)
	events := make(chan *model.Message, 1)

	database.DB.AddUserInChat(channelID, userID)

	fmt.Println("getting messages: ", channelID, userID)

	go func() {
		<-ctx.Done()
		room.Observers.Delete(id)
		database.DB.DeleteUserInChat(channelID, userID)
	}()

	room.Observers.Store(id, &Observer{
		ChannelID: channelID,
		Message:   events,
	})

	return events, nil
}

// GetVideoViewers is the resolver for the getVideoViewers field.
func (r *subscriptionResolver) GetVideoViewers(ctx context.Context, videoID string) (<-chan int, error) {
	viewer := r.getVideoViewers(videoID)

	id := randString(8)
	events := make(chan int, 1)

	go func() {
		<-ctx.Done()
		viewer.Observers.Delete(id)
	}()

	viewer.Observers.Store(id, &VideoObserver{
		VideoID: videoID,
		Count:   events,
	})

	return events, nil
}

// GetChannelViewers is the resolver for the getChannelViewers field.
func (r *subscriptionResolver) GetChannelViewers(ctx context.Context, channelID string, userID string) (<-chan int, error) {
	viewer := r.getChannelViewers(channelID)

	id := randString(8)
	events := make(chan int, 1)

	fmt.Println("Live Viewer Detected")

	go func() {
		<-ctx.Done()
		viewer.Observers.Delete(id)
		database.DB.DeleteChannelView(channelID, userID)
		// TODO: Remove delete channel viewer endpoint since this takes care of it.
		fmt.Println("Removed Channel Viewer")
	}()

	viewer.Observers.Store(id, &ChannelObserver{
		ChannelID: channelID,
		Count:     events,
	})

	return events, nil
}

// GetActivity is the resolver for the getActivity field.
func (r *subscriptionResolver) GetActivity(ctx context.Context, channelID string) (<-chan *model.Activity, error) {
	activity := r.getChannelActivity(channelID)

	id := randString(8)
	events := make(chan *model.Activity, 1)

	go func() {
		<-ctx.Done()
		activity.Observers.Delete(id)
	}()

	activity.Observers.Store(id, &ActivityObserver{
		ChannelID: channelID,
		Activity:  events,
	})

	return events, nil
}

// GetVideoJob is the resolver for the getVideoJob field.
func (r *subscriptionResolver) GetVideoJob(ctx context.Context, jobID string) (<-chan string, error) {
	room := r.getJobStatus(jobID)

	id := randString(8)
	events := make(chan string, 1)

	go func() {
		<-ctx.Done()
		room.Observers.Delete(id)
	}()

	room.Observers.Store(id, &JobObserver{
		JobID:  jobID,
		Status: events,
	})

	return events, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
