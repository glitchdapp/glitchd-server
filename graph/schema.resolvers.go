package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"context"
	"fmt"

	"github.com/prizmsol/prizmsol-server/database"
	"github.com/prizmsol/prizmsol-server/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input *model.NewUser) (*model.User, error) {
	return db.InsertUsers(input), nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input *model.NewUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string) (string, error) {
	return db.LoginAccount(email)
}

// VerifyToken is the resolver for the verifyToken field.
func (r *mutationResolver) VerifyToken(ctx context.Context, id string, token string) (string, error) {
	return db.VerifyToken(id, token)
}

// VerifyEmail is the resolver for the verifyEmail field.
func (r *mutationResolver) VerifyEmail(ctx context.Context, id string, email string) (bool, error) {
	return db.VerifyEmail(id, email)
}

// CreateApp is the resolver for the createApp field.
func (r *mutationResolver) CreateApp(ctx context.Context, input *model.NewApp) (*model.App, error) {
	return db.NewApp(input)
}

// UpdateApp is the resolver for the updateApp field.
func (r *mutationResolver) UpdateApp(ctx context.Context, id string, input model.UpdateApp) (bool, error) {
	return db.UpdateApp(id, input)
}

// DeleteApp is the resolver for the deleteApp field.
func (r *mutationResolver) DeleteApp(ctx context.Context, id string) (*model.App, error) {
	return db.DeleteApp(id)
}

// CreatePage is the resolver for the createPage field.
func (r *mutationResolver) CreatePage(ctx context.Context, input model.NewPage) (*model.Page, error) {
	return db.CreatePage(input)
}

// UpdatePage is the resolver for the updatePage field.
func (r *mutationResolver) UpdatePage(ctx context.Context, id string, input model.UpdatePage) (bool, error) {
	return db.UpdatePage(id, input)
}

// DeletePage is the resolver for the deletePage field.
func (r *mutationResolver) DeletePage(ctx context.Context, id string) (bool, error) {
	return db.DeletePage(id)
}

// UpdateMembership is the resolver for the updateMembership field.
func (r *mutationResolver) UpdateMembership(ctx context.Context, id string, input model.UpdateMembership) (bool, error) {
	return db.UpdateMembership(id, input)
}

// AddToWaitlist is the resolver for the addToWaitlist field.
func (r *mutationResolver) AddToWaitlist(ctx context.Context, input model.NewWaitlist) (*model.Waitlist, error) {
	return db.AddUserToWaitlist(input)
}

// UpdateWaitlistEntry is the resolver for the updateWaitlistEntry field.
func (r *mutationResolver) UpdateWaitlistEntry(ctx context.Context, email string, canEnter bool) (*model.Waitlist, error) {
	return db.UpdateWaitlistEntry(email, canEnter)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return []*model.User{}, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	return &model.User{}, nil
}

// GetUserByUsername is the resolver for the getUserByUsername field.
func (r *queryResolver) GetUserByUsername(ctx context.Context, username string) (*model.User, error) {
	return db.GetAccount(username)
}

// GetUserByEmail is the resolver for the getUserByEmail field.
func (r *queryResolver) GetUserByEmail(ctx context.Context, email string) (*model.User, error) {
	return db.GetAccountByEmail(email)
}

// SearchUsers is the resolver for the searchUsers field.
func (r *queryResolver) SearchUsers(ctx context.Context, query string) ([]*model.User, error) {
	return db.SearchUsers(query)
}

// GetMembership is the resolver for the getMembership field.
func (r *queryResolver) GetMembership(ctx context.Context, appID string) (*model.Membership, error) {
	return db.GetMembership(appID)
}

// GetMembershipBySession is the resolver for the getMembershipBySession field.
func (r *queryResolver) GetMembershipBySession(ctx context.Context, sessionID string) (*model.Membership, error) {
	return db.GetMembershipBySession(sessionID)
}

// GetApps is the resolver for the getApps field.
func (r *queryResolver) GetApps(ctx context.Context, userID string) ([]*model.App, error) {
	return db.GetApps(userID)
}

// GetApp is the resolver for the getApp field.
func (r *queryResolver) GetApp(ctx context.Context, id string) (*model.App, error) {
	return db.GetApp(id)
}

// GetAppByVanity is the resolver for the getAppByVanity field.
func (r *queryResolver) GetAppByVanity(ctx context.Context, vanity string) (*model.App, error) {
	return db.GetAppByVanity(vanity)
}

// GetUserApp is the resolver for the getUserApp field.
func (r *queryResolver) GetUserApp(ctx context.Context, userID string, vanity string) (*model.App, error) {
	return db.GetUserApp(userID, vanity)
}

// GetUserApps is the resolver for the getUserApps field.
func (r *queryResolver) GetUserApps(ctx context.Context, userID string) ([]*model.App, error) {
	return db.GetUserApps(userID)
}

// GetPages is the resolver for the getPages field.
func (r *queryResolver) GetPages(ctx context.Context, appID string) ([]*model.Page, error) {
	return db.GetPages(appID)
}

// GetPage is the resolver for the getPage field.
func (r *queryResolver) GetPage(ctx context.Context, id string) (*model.Page, error) {
	return db.GetPage(id)
}

// GetWaitlist is the resolver for the getWaitlist field.
func (r *queryResolver) GetWaitlist(ctx context.Context, email string) (*model.Waitlist, error) {
	panic(fmt.Errorf("not implemented: GetWaitlist - getWaitlist"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
var db = database.Connect().InitTables()
